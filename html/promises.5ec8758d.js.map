{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAaC,SAASC,cAAc,uBACpCC,EAAYF,SAASC,cAAc,sBACnCE,EAASH,SAASC,cAAc,wBAChCG,EAAOJ,SAASC,cAAc,SAgCF,SAAzBI,EAAcC,EAAUC,GACjC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAgBC,KAAKC,SAAW,GAM1CC,YAAW,KACHH,GACRF,EAAQ,C,SAAEH,E,MAAUC,IAEhBG,EAAO,C,SAAEJ,E,MAAUC,GAAO,GAC3BA,EAAM,G,CAxCwBH,EAA5BW,iBAAiB,UAAWC,IACjCA,EAAMC,iBACNb,EAAKc,iBAAiBC,aAAa,WAAY,IAIP,MAAlCC,EAAQC,OAAOC,SAASvB,EAAWwB,OACnCC,EAAOH,OAAOC,SAASpB,EAAUqB,OAIS,IAA5C,IAAIE,EAAI,EAAGA,EAAItB,EAAOoB,MAAOE,IAC7BpB,EAAcoB,EAAI,EAAGL,EAAQI,EAAOC,GACnCC,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MACfoB,EAAA9B,GAAS+B,OAAOC,QAAQ,uBAAqBvB,QAAiBC,MAAU,IAE3EuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAChBoB,EAAA9B,GAAS+B,OAAOG,QAAQ,sBAAoBzB,QAAiBC,MAAU,IAE1EyB,SAAQ,KACFP,IAAMtB,EAAOoB,MAAQ,GAAGnB,EAAKc,iBAAiBe,gBAAgB,WAAW,GAC9E","sources":["src/js/promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n\nconst firstDelay = document.querySelector('input[name=\"delay\"]');\nconst stepDelay = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\nconst form = document.querySelector('.form');\n\n// перешкодження перезавантажуванню браузера\n// блокує в формі останній елемент (сабміт)\n\nform.addEventListener('submit', (event) => {\nevent.preventDefault();\nform.lastElementChild.setAttribute('disabled', '');\n\n// значення інпутів перетворюються на цілі числа\n\nconst delay = Number.parseInt(firstDelay.value);\nconst step = Number.parseInt(stepDelay.value);\n\n// асинхронний цикл, де є кілька варіантів вирішення задачі\n\nfor(let i = 0; i < amount.value; i++) {\n    createPromise(i + 1, delay + step * i)\n    .then(({ position, delay}) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay}) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    })\n    .finally(() => {\n        if(i === amount.value - 1) form.lastElementChild.removeAttribute('disabled');\n    })\n}\n});\n\n// функція, яка генерує рандомне вирішення. \n\nfunction createPromise(position, delay) {\nreturn new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n \n    // викликається асинхронну операцію\n    // якщо значення true, то resolve\n// якщо значення false, то reject  \n  \nsetTimeout(() => {\n    if (shouldResolve) {\nresolve({ position, delay});\n   }\n    reject({ position, delay});\n}, delay);\n});\n}\n   "],"names":["$1GAPJ","parcelRequire","$255e371459344cd5$var$firstDelay","document","querySelector","$255e371459344cd5$var$stepDelay","$255e371459344cd5$var$amount","$255e371459344cd5$var$form","$255e371459344cd5$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","lastElementChild","setAttribute","delay1","Number","parseInt","value","step","i","then","$parcel$interopDefault","Notify","success","catch","failure","finally","removeAttribute"],"version":3,"file":"promises.5ec8758d.js.map"}